
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>StopUsingWindows on nuaNce&#39;s blog</title>
   <link>https://co1ncidence.github.io/tags/stopusingwindows/</link>
   <description>Recent content in StopUsingWindows on nuaNce&#39;s blog</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Sat, 22 Aug 2020 12:21:14 -0500</lastBuildDate>
   
       <atom:link href="https://co1ncidence.github.io/tags/stopusingwindows/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Why I Stopped Using Windows</title>
       <link>https://co1ncidence.github.io/posts/why-i-stopped-using-windows/</link>
       <pubDate>Sat, 22 Aug 2020 12:21:14 -0500</pubDate>
       
       <guid>https://co1ncidence.github.io/posts/why-i-stopped-using-windows/</guid>
       <description>&lt;p&gt;Let&amp;rsquo;s get something out of the way first, I used to &lt;em&gt;love&lt;/em&gt; Windows, I admit that it was an &amp;ldquo;ignorant bliss&amp;rdquo; kind of thing but back then I couldn&amp;rsquo;t get enough of it. And this love for Windows increased even more when I began using some of it&amp;rsquo;s hidden, &amp;ldquo;power user oriented&amp;rdquo; features, such as the built in window manager and advanced multitasking capabilities. While I did have quite a good time in my years using Windows, reality dawned on me in early 2020. I began noticing many things that were just unacceptable about an operating system that makes up the vast majority of the market share that it is part of. Some of the reasons were mere annoyances, others were ethical concerns. Not only that, I had started noticing, and learning, more and more about an alternative to Windows, more on that later though. In this article I plan on talking in more detail about this, why I decided to stop using Microsoft&amp;rsquo;s garbage and moved on to something far, far better.&lt;/p&gt;
&lt;h2 id=&#34;whats-wrong-with-windows&#34;&gt;What&amp;rsquo;s wrong with Windows?&lt;/h2&gt;
&lt;p&gt;I will divide this subsection into 5 categories and talk about them separately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Slow, bloated interface, terrible UI design&lt;/li&gt;
&lt;li&gt;Many security and privacy issues, constant spying from Microsoft&lt;/li&gt;
&lt;li&gt;Software base being almost completely proprietary&lt;/li&gt;
&lt;li&gt;Lack of control over system, too much going on without user consent&lt;/li&gt;
&lt;li&gt;Other, more miscellaneous concerns&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-slow-bloated-interface-terrible-ui-design&#34;&gt;1. Slow, bloated Interface, terrible UI design:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Since design is a more subjective topic, this section will be regarded as the &amp;ldquo;least important&amp;rdquo;, most will agree with what I say but some might not, keep this in mind as you read&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Something that I noticed while using windows on a daily basis was just how terrible the design was, there is no real effort put into the interface of Windows. I was constantly changing the look &amp;amp; feel of Windows using 3rd party programs like theme patchers to make the experience even tolerable. Buttons are misaligned all over, there is no real consistency to in the implementation of animations and other visual effects throughout the system, and worst of all, some of the less used interfaces still have design elements from older versions of Windows. One prime example of this can be found in Microsoft&amp;rsquo;s &lt;a href=&#34;https://outlook.live.com/owa/&#34;&gt;Outlook&lt;/a&gt; email client, which still uses &lt;a href=&#34;https://i.postimg.cc/Rh4gmHG8/Outlook-DV-Settings.jpg&#34;&gt;Windows XP dialogs&lt;/a&gt; for some of the account settings menus. And there isn&amp;rsquo;t much you can do to change these things either, since the only real customization options that Microsoft provides are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing the desktop wallpaper&lt;/li&gt;
&lt;li&gt;Arranging desktop icons&lt;/li&gt;
&lt;li&gt;Adding items (only launchers so far) to the taskbar&lt;/li&gt;
&lt;li&gt;And changing the single global accent color, which only a handful of &amp;ldquo;Windows Apps&amp;rdquo; actually use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And along with being terribly designed, the interface of Windows is also extremely slow and bloated, with animations taking seemingly forever to finish. Cool animations are fine and all, but if you ever try to get anything done fast in Windows, you will have a hard time if you are waiting 2-3 seconds for something like the Start Menu to open up. And speaking of the Start menu, not only is it slow, it provides no helpful features at a glance and requires you to spend considerable time scrolling or searching to actually find anything. On top of that it is filled with ads and publications which, are put there without any user consent whatsoever. All of these features actually end up causing harm as well. Microsoft&amp;rsquo;s developers have implemented almost no optimization into their interface, so even simple operations use up ridiculous amounts of RAM. Just idling your Windows desktop after boot uses up a whopping 1.4-20 gigabytes of ram and anywhere from 15-40 percent of your processor, depending on the strength of your hardware of course. This not only makes Windows a torturous experience to use on weaker machines, but also slows some of them down because of the constant stress the computers are in. And if you were to look closer, which I highly advise you don&amp;rsquo;t for your own good, you would find many misaligned texts, badly places lines, boxes out of order etc. In short, the Windows user interface is an unacceptable mess, and the saddest part is that this terrible experience, something I wouldn&amp;rsquo;t use for free, costs 120 glorious US dollars&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;many-security-and-privacy-issues-constant-spying-from-microsoft&#34;&gt;Many security and privacy issues, constant spying from Microsoft&lt;/h3&gt;
&lt;h3 id=&#34;software-base-being-almost-completely-proprietary&#34;&gt;Software base being almost completely proprietary&lt;/h3&gt;
&lt;h3 id=&#34;lack-of-control-over-system-too-much-going-on-without-user-consent&#34;&gt;Lack of control over system, too much going on without user consent&lt;/h3&gt;
&lt;h3 id=&#34;other-more-miscellaneous-concerns&#34;&gt;Other, more miscellaneous concerns&lt;/h3&gt;
</description>
     </item>
   
     <item>
       <title>My Personal Software Faves</title>
       <link>https://co1ncidence.github.io/posts/some-cool-software/</link>
       <pubDate>Mon, 17 Aug 2020 10:43:39 -0500</pubDate>
       
       <guid>https://co1ncidence.github.io/posts/some-cool-software/</guid>
       <description>&lt;p&gt;This is a list of some of the best software that I have come across in my journey using Linux. I highly recommend that you try them out and maybe even give the developers a well earned star on Github to show your support :) I&amp;rsquo;ve divided the software into sections based on their uses, so if you don&amp;rsquo;t see what you need just scroll down until you see the type of software you are searching for.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Links to the software&amp;rsquo;s Github page are in the headers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;maimhttpsgithubcomnaelstrofmaim-the-better-screenshot-tool&#34;&gt;&lt;a href=&#34;https://github.com/naelstrof/maim&#34;&gt;Maim&lt;/a&gt;, the better screenshot tool&lt;/h2&gt;
&lt;p&gt;One of the most important pieces of software you can have is something to capture you display, while &lt;a href=&#34;https://github.com/dreamer/scrot&#34;&gt;scrot&lt;/a&gt; does the job quite well, it has issues with selecting areas and windows, which is where Maim comes in, it does basically the same thing as scrot but without any of the rendering and selection issues. Also, every screenshot you see on this blog was taken using Maim.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; bind this command in your hotkey daemon&amp;rsquo;s config and you can use it to easily take and paste screenshots:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;maim -s -u | xclip -selection clipboard -t image/png&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6T1WTMF.png#float-right&#34; alt=&#34;picture-of-sxiv&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sxivhttpsgithubcommuennichsxiv-simple-x-image-viewer&#34;&gt;&lt;a href=&#34;https://github.com/muennich/sxiv&#34;&gt;SXIV&lt;/a&gt;, Simple X Image Viewer&lt;/h2&gt;
&lt;p&gt;Many image viewers out there are usually needlessly large programs with unnecessary features, SXIV aims to just be a simple image viewer for X. And it does just that. You can zoom, pan, have a thumbnail mode, and just about anything you really need. Not much more to say, just something that everyone who wants to move to more efficient software should be using.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;giphhttpsgithubcomphischgiph-simple-gif-recorder&#34;&gt;&lt;a href=&#34;https://github.com/phisch/giph&#34;&gt;Giph&lt;/a&gt;, Simple .gif Recorder&lt;/h2&gt;
&lt;p&gt;Exactly what it claims to be, Giph a simple little utility that makes use of FFmpeg&amp;rsquo;s recording abilities to make it easy to record gifs of all, or sections of your screen. You can even use slop to select a section of your screen and then output it as a gif file, which is very convenient. And, like with maim, every gif that you see on this blog was recorded using Giph.&lt;/p&gt;
&lt;p&gt;Hi phisch &lt;strong&gt;:)&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;lyrebirdhttpsgithubcomchxrltlyrebird-voice-changer-for-linux&#34;&gt;&lt;a href=&#34;https://github.com/chxrlt/lyrebird&#34;&gt;Lyrebird&lt;/a&gt;, Voice Changer For Linux&lt;/h2&gt;
&lt;p&gt;Just looking at the UI of this program, you can easily tell what it is. You simply select which effect to apply then toggle the application, it couldn&amp;rsquo;t possibly get simpler to use. It works really good too, with there being minimal to none amounts of audible distortion and/or lag in input time when using this to change your voice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/FNQWNFu.png&#34; alt=&#34;picture-of-lyrebird&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/65Holv7.png#float-right&#34; alt=&#34;picture-of-cfm&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cfmhttpsgithubcomwillecclescfm-cactus-file-manager&#34;&gt;&lt;a href=&#34;https://github.com/WillEccles/cfm&#34;&gt;cfm&lt;/a&gt;, Cactus File Manager&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve all used things like Ranger at some point, but sometimes you just need a small little file browser to get around directories quickly or make a quick change to a file. cfm is great for things like this, since it doesn&amp;rsquo;t have any unnecessary features and thus remains very fast. It also looks really nice and has a cool indent effect on the currently selected item, which is pointless in terms of usability but I find it to be quite nice.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ripcordhttpscancelfmripcord-lightweight-discordslack-client&#34;&gt;&lt;a href=&#34;https://cancel.fm/ripcord/&#34;&gt;Ripcord&lt;/a&gt;, Lightweight Discord/Slack Client&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve used the normal Discord electron client, you are most likely aware of how resource intensive and bloated it can be, especially when it comes to ram usage. This is where Ripcord comes in, it is ridiculously lightweight and has most of the features you could want as well, including some very snappy movement via keybinds. It also has customizable colors out of the box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nLNDatX.png&#34; alt=&#34;picture-of-ripcord&#34;&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>My Guide to The Linux Command Line</title>
       <link>https://co1ncidence.github.io/posts/bash-basics-for-nubs/</link>
       <pubDate>Sat, 15 Aug 2020 14:15:28 -0500</pubDate>
       
       <guid>https://co1ncidence.github.io/posts/bash-basics-for-nubs/</guid>
       <description>&lt;p&gt;When I first started with Linux, and especially the command line, It was difficult to find a truly optimal and comprehensive guide to these things. While most tutorials were nice and gave me a good starting point, they usually provided inefficient information or didn&amp;rsquo;t showcase the most optimal commands/strategies. I am making this list as more of a dump for all of the things that I have learned about bash so far, which isn&amp;rsquo;t too much compared to some but I like to think that I know something. So without further ado, here is my bash basics list to boost you up in the Linux elitist ladder. And as a final note, unless specified, all of these commands are being run from the default (home) folder that your terminal puts you in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Read The F***ing Manual&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;first-some-things-to-note-before-delving-into-the-command-line&#34;&gt;First, some things to note before delving into the command line:&lt;/h2&gt;
&lt;p&gt;The Terminal is simply an interface to interact with your computer, by itself, it is nothing but an empty program. A terminal (in 99.99% of cases) needs a &lt;strong&gt;Shell&lt;/strong&gt; to function. A shell is an interactive text interface for the user, and the &lt;strong&gt;Terminal&lt;/strong&gt; is the tool most often used to run commands via the shell. There are many shells out there, thought this tutorial in specific will be focusing on the most is &lt;strong&gt;Bash&lt;/strong&gt;, the most popular shell in use right now and the default shell of most &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux&#34;&gt;Linux&lt;/a&gt; distributions. Bash allows you to run commands from other programs or utilities, common ones you&amp;rsquo;ll mostly likely need are those from something like the &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Core_Utilities&#34;&gt;GNU Coreutils&lt;/a&gt;, and any other programs you might use daily. Once you have familiarized yourself with these terms, you can get on to actually using the command line. And finally, and most likely &lt;strong&gt;The Most Important Thing You Will Read Here&lt;/strong&gt;, you have to always be willing to read documentation and official manuals, don&amp;rsquo;t go around annoying others for help. Some things to do when encountering issues can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The official manual of the program, accessed by running the man command for that program in the terminal&lt;/li&gt;
&lt;li&gt;Searching through the Github issues of the program you are struggling with to find a similar or identical problem&lt;/li&gt;
&lt;li&gt;Searching through online forums like &lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reading Wiki pages on amazing websites like the &lt;a href=&#34;https://wiki.archlinux.org/&#34;&gt;ArchWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Searching &lt;a href=&#34;https://reddit.com&#34;&gt;Reddit&lt;/a&gt; for similar problems or making a post about your own&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Following these steps will lead you to your solution far more often than not.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;second-some-things-i-wish-i-knew-when-starting-off&#34;&gt;Second, some things I wish I knew when starting off:&lt;/h2&gt;
&lt;p&gt;This is just a collection of cool tips and tricks that&amp;rsquo;ll help with fully optimizing your command line skills, expect this to be updated frequently as I learn more.&lt;/p&gt;
&lt;h3 id=&#34;autocomplete&#34;&gt;Autocomplete&lt;/h3&gt;
&lt;p&gt;Something I didn&amp;rsquo;t realize for a long time was that bash has built in tab-complete, so instead of typing in entire long names of folders and/or programs, you can just type in a few letters and press the &lt;code&gt;tab&lt;/code&gt; key, Bash will then auto-type the rest of the name for your. If there are multiple possibilities, Bash will just output them all, so you can choose the one you want.&lt;/p&gt;
&lt;h3 id=&#34;global-aliases&#34;&gt;Global Aliases:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;..&lt;/code&gt; is an alias for the parent folder of the directory you are currently working inside, and the word &lt;code&gt;.&lt;/code&gt; is the alias for the folder currently occupied. These are useful to know as they can save you precious time typing in long directory paths when you are working with more advanced commands. These aliases can be used with just about any command so be careful with them.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; is an alias that stands for &lt;code&gt;/home/username&lt;/code&gt;, with &amp;ldquo;username&amp;rdquo; being the user name of the currently active user. It can be used with many commands, so once again, be careful with what you do. If you are ever unsure, just remind yourself that it &lt;strong&gt;directly&lt;/strong&gt; translates to &lt;code&gt;/home/username&lt;/code&gt;, that&amp;rsquo;ll help you get a bearing on the command you are about to run.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; is an alias for the last command run. For example, if you ran a command but forgot to add &lt;code&gt;sudo&lt;/code&gt; or something, you can simply run &lt;code&gt;sudo !!&lt;/code&gt; instead of typing out the whole of the previous command.&lt;/p&gt;
&lt;h3 id=&#34;conditional-execution&#34;&gt;Conditional Execution:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; is a character you can insert after a command and use to spawn command outputs in the background, and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; can be used to implement &lt;strong&gt;Conditional Execution&lt;/strong&gt;, which means you can run multiple commands in succession, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#command2 will only run if command1 is successful&lt;/span&gt;
command1 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; command2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also do another kind of sequential execution in the command line, using the &lt;code&gt;||&lt;/code&gt; function, this works in a similar way to &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; but instead of running a command after the execution of the previous one, it runs a second command only if the first one failed to run, sort of like a &amp;ldquo;Plan B&amp;rdquo; if you will. Here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#command2 will only run if command1 fails for any reason&lt;/span&gt;
command1 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; command2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pipes-in-bash&#34;&gt;Pipes In Bash:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pipes&lt;/strong&gt; are things you can use to filter one command through another, thus allowing for things like controlling outputs of commands. Pipes have many uses so I recommend that you look more into them as there is no way I can go into full depth here. Here is an example of a pipe being used to filter the output of of &lt;code&gt;fc-list&lt;/code&gt; through &lt;code&gt;grep&lt;/code&gt; to only show fonts with a certain name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fc-list | grep Roboto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;keyboard-shortcuts&#34;&gt;Keyboard Shortcuts&lt;/h3&gt;
&lt;p&gt;Unknown to me for quite a while during my usage of the terminal in Linux was that there were many keyboard shortcuts that could be used to navigate and control text much faster in the command line. These are mostly inherited from some of the keyboard shortcuts in editors like &lt;code&gt;emacs&lt;/code&gt;, from what I can tell. Here are the ones I find myself using most often:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + arrow keys&lt;/code&gt; will move the cursor one word in the respective direction&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + b/f&lt;/code&gt; will move the cursor backwards and forwards respectively&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + w&lt;/code&gt; will delete the previous word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + h&lt;/code&gt; works the same way as &lt;code&gt;backspace&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + d&lt;/code&gt; will delete the character under the cursor&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + a&lt;/code&gt; moves the cursor all the way back to the prompt&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + u&lt;/code&gt; will delete all text entered&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + r&lt;/code&gt; will initiate a reverse search for previously entered commands&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + n/p&lt;/code&gt; will cycle you through previously entered commands&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + m/j&lt;/code&gt;, both work the same way as &lt;code&gt;enter&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;file-management&#34;&gt;File Management:&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; stands for &amp;ldquo;change directory&amp;rdquo;, you can use this command to enter and leave directories. It is not limited to neighboring directories, however, you can use &lt;code&gt;cd&lt;/code&gt; to move from one side of your computer to another, provided you don&amp;rsquo;t mess up typing in the names of folders. First thing to note is that a &lt;code&gt;/&lt;/code&gt; is not necessary after a folder name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#these 2 commands are the same&lt;/span&gt;
cd ~/folder1/folder2/
cd ~/folder1/folder2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can use the aliases previously mentioned to navigate folders as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#running this moves you to the parent folder&lt;/span&gt;
cd ..
&lt;span style=&#34;color:#75715e&#34;&gt;#running this does nothing, as you are moving to the same folder&lt;/span&gt;
cd .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, here are some examples of the &lt;code&gt;cd&lt;/code&gt; command in use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#this will place you in the polybar config folder&lt;/span&gt;
cd ~/.config/polybar/
&lt;span style=&#34;color:#75715e&#34;&gt;#this will move you to your root directory&lt;/span&gt;
cd /
&lt;span style=&#34;color:#75715e&#34;&gt;#this will move you back to home&lt;/span&gt;
cd ~/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; is one of the commands you will use the most, this command lists all of the files and folders in the current folder, allowing you to get a better idea of where you are. Here is an example of the &lt;code&gt;ls&lt;/code&gt; command in use:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JeHH33T.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;touch&lt;/code&gt; is used (mostly) to create a new, empty file in the folder you are currently occupying, the filetype can vary based on name extension, for example, to create a new &lt;code&gt;css&lt;/code&gt; file you would run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;touch file.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also use touch to create files in other folders:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;touch ~/Documents/file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;while &lt;code&gt;touch&lt;/code&gt; is a cool command, it can sometimes be a pain to type, so another alternative can be just to type &lt;code&gt;:&amp;gt;&lt;/code&gt; instead, as it serves the same purpose:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#creates a new css file&lt;/span&gt;
:&amp;gt; newfile.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; is like &lt;code&gt;touch&lt;/code&gt;, but instead of creating a single file it creates an entire directory, and like &lt;code&gt;touch&lt;/code&gt;, this can be used to create a folder anywhere on your system, provided you have the right permissions to do so, here is an example of the &lt;code&gt;mkdir&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mkdir folder/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; is a command used to move files from one location to another, and because of this it can also be used to replace a file with another. It is also possible to change the name of a file when moving it. Example usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mv /usr/share/file.txt ~/Documents/newfile.txt
&lt;span style=&#34;color:#75715e&#34;&gt;#mv can also be used to rename files&lt;/span&gt;
mv file.txt file2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cp&lt;/code&gt; works the same way as &lt;code&gt;mv&lt;/code&gt;, but instead of moving a file it creates a copy of the original file in the new location, and like &lt;code&gt;mv&lt;/code&gt;, the resulting file can have new name. Example usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cp ~/.local/bin/command /usr/bin/command2
&lt;span style=&#34;color:#75715e&#34;&gt;#if name is not a concern, just specify resulting directory&lt;/span&gt;
cp ~/.local/bin/command /usr/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;rm&lt;/code&gt; is another very useful, but dangerous command. It stands for &amp;ldquo;remove&amp;rdquo; and can be used to remove any
However, unlike the other file management commands, &lt;code&gt;rm&lt;/code&gt; cannot remove folders by default, this requires the use of a couple &lt;strong&gt;Flags&lt;/strong&gt;, which are just letters/words you can attach to a command to unlock abilities that the command cannot do by default. For &lt;code&gt;rm&lt;/code&gt; to be able to delete a whole folder, it requires the &lt;code&gt;-r&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt; flags, here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;rm -r -f folder/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Though separating flags is not necessary, you can just combine them into one flag like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;rm -rf folder/
&lt;span style=&#34;color:#75715e&#34;&gt;#you can also use the alternative &amp;#34;rmdir&amp;#34; command&lt;/span&gt;
rmdir folder/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Thus is how you can use &lt;code&gt;rm&lt;/code&gt; to remove folders as well as individual files.&lt;/p&gt;
&lt;h4 id=&#34;using-the--character-in-file-management&#34;&gt;Using the &amp;ldquo;*&amp;rdquo; character in file management&lt;/h4&gt;
&lt;p&gt;You can also use this basic RegEx character to make bulk file movement easier, for example, you can move every &lt;code&gt;.png&lt;/code&gt; file in a folder somewhere else using the &lt;code&gt;*&lt;/code&gt; character, for example, this command is doing exactly that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;mv *.png ~/Pictures/stuff/
&lt;span style=&#34;color:#75715e&#34;&gt;#once again, this is not limited to the current location&lt;/span&gt;
mv ~/usr/share/backgrounds/*.png ~/Pictures/stuff/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also pair &lt;code&gt;*&lt;/code&gt; with &lt;code&gt;rm&lt;/code&gt;, this can be very dangerous so make sure you are careful. Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#this removes all png files in folder&lt;/span&gt;
rm *.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;permissions&#34;&gt;Permissions&lt;/h4&gt;
&lt;p&gt;Sometimes, your user may not have the necessary permissions to execute certain commands on a file or folder, this is because the owner of said file/folder is the &lt;strong&gt;root user&lt;/strong&gt;, to obtain the abilities of the root user, you just have to place the word &lt;code&gt;sudo&lt;/code&gt; behind your command. &lt;code&gt;sudo&lt;/code&gt; stands for &amp;ldquo;Super User DO&amp;rdquo;, and will allow you to run commands with elevated permissions, here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;sudo rm -rf /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command is a great showcase of the dangers of &lt;code&gt;sudo&lt;/code&gt; as well. If you haven&amp;rsquo;t already realized, this command will wipe every file and folder on your system. So whenever something requires you to be root to run a command, always make sure you know what you are doing, and always remember that there is a reason that there is a reason for a password to be between you and the execution of this command. Stay safe.&lt;/p&gt;
&lt;h2 id=&#34;file-viewing--and-output-controlfiltering&#34;&gt;File Viewing  and Output Control/Filtering:&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;cat&lt;/code&gt; command is one of the first to know when viewing files, running &lt;code&gt;cat&lt;/code&gt; on a file which contains any sort of text will cause your terminal to output the full contents of your file, for example, running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cat .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will show you the contents of your &lt;code&gt;.bashrc&lt;/code&gt; file, otherwise known as the bash shell configuration file, more about this later. &lt;code&gt;cat&lt;/code&gt; is very useful when you want to look at certain content in a file but don&amp;rsquo;t want to open it in your editor.
You may realize. Here is an example of the &lt;code&gt;cat&lt;/code&gt; command being used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5Axaprt.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;However, that &lt;code&gt;cat&lt;/code&gt; can be annoying when used on longer files, as you have to manually scroll back if you want to view any content near the beginning of the file. This is where another, very useful command comes in. The &lt;code&gt;less&lt;/code&gt; command is similar to &lt;code&gt;cat&lt;/code&gt;, but instead of just throwing all of the output at you and leaving you alone to manage it, &lt;code&gt;less&lt;/code&gt; allows you to view the file in a scrolling window, with the top of the file being the beginning. You can then use the Up and Down arrow keys of J and K to navigate the file as you want. For those of you comfortable with them, Vim keybindings work in &lt;code&gt;less&lt;/code&gt; as well. As you can see here, the experience is far more intuitive:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TaXK4Rf.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sometimes, however, we have too much output of a command, one example of such a problematic command can be the &lt;code&gt;fc-list&lt;/code&gt; command, which lists all fonts currently installed on your system. You can filter the output of this command using &lt;code&gt;grep&lt;/code&gt;, an extremely powerful search utility. &lt;code&gt;grep&lt;/code&gt; however, usually requires piping, which I talked about earlier. Here is a basic example of the usage of &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;This command will have hundreds of lines of output, displaying all of your fonts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fc-list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command, however, will filter out every result and only show results containing the word &amp;ldquo;Roboto&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fc-list | grep Roboto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;editing-files-in-the-command-line-using-gnu-nano&#34;&gt;Editing Files in The Command Line Using GNU Nano:&lt;/h2&gt;
&lt;p&gt;Throughout your Linux journey, there will be many, and I mean many, times where you will have to make a quick edit to some configuration file of some sort. Editing these files with a visual editor can be a pain as you have to run the editor as root, find the file you want to edit, and then finally get to editing it. As a solution to this, computers running any GNU/Linux Distribution usually come with a terminal editor installed, called &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_nano&#34;&gt;Nano&lt;/a&gt;. Nano is an editor that allows you to edit any text file through the terminal. Here is an example of me editing the &lt;code&gt;/etc/fstab&lt;/code&gt; file using Nano (note the use of sudo to access this file):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/72sEkgT.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Nano has many keyboard shortcuts and is a quite featured editor, though you will most likely only be using it for quick edits, as anything bigger would be better done in a real editor. The only real shortcut to know in Nano is &lt;strong&gt;Ctrl + X&lt;/strong&gt;, this saves and exits the file, prompting you before doing so as well.&lt;/p&gt;
&lt;h2 id=&#34;implementations-of-time-in-the-command-line&#34;&gt;Implementations of Time In The Command Line&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;date&lt;/code&gt; command can be used to quickly display the current date and time on the terminal, while this is cool it doesn&amp;rsquo;t really have much of a use in day to day command line usage, it is more effective in scripts and programs, as a reliable way to get system time. Here is an example of the &lt;code&gt;date&lt;/code&gt; command in use:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7YiAa6m.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another time related command you can use is &lt;code&gt;uptime&lt;/code&gt;, this command outputs the amount of time the system has been on for, this can be helpful to know for a variety of reasons. By default, the &lt;code&gt;uptime&lt;/code&gt; command has very messy output, so run it with the &lt;code&gt;-p&lt;/code&gt; flag to make it more readable, here is an example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0BMdeOh.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; command can be used to measure how much time another program takes to open up, this can be useful when diagnosing problems regarding system performance issues. Here is an example of the &lt;code&gt;time&lt;/code&gt; command being used to display the startup time of the Alacritty Terminal:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/v2BNmAe.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;process-management-in-the-terminal&#34;&gt;Process Management in the Terminal&lt;/h1&gt;
&lt;p&gt;Processes in Linux are usually given certain &lt;code&gt;pid&lt;/code&gt;&#39;s, having this form of identification allows them to be easily tracked and managed, mostly this is used to take care of or kill problematic processes. There are 2 commands that can be used to find the &lt;code&gt;pid&lt;/code&gt; of a program. You can use either &lt;code&gt;pidof&lt;/code&gt; of &lt;code&gt;pgrep&lt;/code&gt;. For the purposes of this guide, I will be using the &lt;code&gt;pgrep&lt;/code&gt; command. Here is an example of me using &lt;code&gt;pgrep&lt;/code&gt; to find the &lt;code&gt;pid&lt;/code&gt; of Alacritty, a program that I know is currently running:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/4dtVgQvB/image.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Though, while this command is useful in a limited use case, you will most likely find it easier to just use the &lt;code&gt;pkill&lt;/code&gt; command. &lt;code&gt;pkill&lt;/code&gt; allows you to kill a process using a variety of signals, 15 to be exact. The only ones that really matter, however, are signals 9 and 15, otherwise known as &lt;code&gt;SIGKILL&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; respectively. &lt;code&gt;SIGTERM&lt;/code&gt; will kill a process off safely and slowly, but sometimes this is not enough, so you can use &lt;code&gt;SIGKILL&lt;/code&gt; to immediately terminate it, but I recommend trying your best not to resort to that option, as it could cause problems. Different signals can be invoked using &lt;strong&gt;Flags&lt;/strong&gt;. &lt;code&gt;pkill&lt;/code&gt;, however, defaults to using the &lt;code&gt;SIGTERM&lt;/code&gt; signal, so for 99% of your use cases just using &lt;code&gt;pkill&lt;/code&gt; serves as enough, as shown in this example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/y8cH0JT2/image.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another thing to take into account when dealing with running processes is memory usage, you can use the &lt;code&gt;free&lt;/code&gt; command with the &lt;code&gt;-h&lt;/code&gt; flag to display the amount of memory currently being used:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/nVXcCh6f/image.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;But what if you wanted to see an interactive interface from which you could manage processes and see their relative resource usage, a &amp;ldquo;task manager&amp;rdquo; if you will. One of the programs you will find yourself most frequently using is &lt;code&gt;htop&lt;/code&gt;, while not normally included with most Linux Distros, it is a must have utility, a lightweight and easy to use terminal task manager. I suggest you check out the program&amp;rsquo;s GitHub page if you want to learn more. For now, however, here is a screenshot of &lt;code&gt;htop&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/YSSBZX7B/image.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creating-shell-aliases&#34;&gt;Creating Shell Aliases&lt;/h2&gt;
&lt;p&gt;You may or not have noticed a file called &lt;code&gt;.bashrc&lt;/code&gt; in your Home Directory. This file is the configuration file of the Bash Shell, and can be used to do some cool things, one of which is creating shell aliases. Shell aliases can be used to simplify long and complicated, or even simply hard-to-type commands into smaller ones. To add a shell alias, simple append a line following this syntax to the end of the &lt;code&gt;.bashrc&lt;/code&gt; file, replacing the placeholder words with a word/command of your choice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;alias newcommand&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long-and-annoying-old-command&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you written this (hopefully using Nano), simply save the file and restart your terminal. Try typing in your new command, you will see that your chosen word acts as if it was that annoying command that you chose to replace.&lt;/p&gt;
&lt;p&gt;The possibilities with shell aliases are almost infinite, but for some inspiration, here are some of the ones that I am currently using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;alias ls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exa --group-directories-first&amp;#34;&lt;/span&gt;
alias walls&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd ~/usr/pic/wallpapers/&amp;#34;&lt;/span&gt;
alias df&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;df -h /dev/sda3&amp;#34;&lt;/span&gt;
alias nvimrc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nvim ~/.config/nvim/init.vim&amp;#34;&lt;/span&gt;
alias c&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;clear&amp;#34;&lt;/span&gt;
alias download&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;youtube-dl -x --audio-format mp3&amp;#34;&lt;/span&gt;
alias shuffle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;feh --bg-fill --randomize ~/usr/pic/wallpapers/&amp;#34;&lt;/span&gt;
alias class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd ~/usr/doc/school/&amp;#34;&lt;/span&gt;
alias notes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd ~/usr/doc/school/awo/&amp;#34;&lt;/span&gt;
alias t&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;todo.sh&amp;#34;&lt;/span&gt;
alias du&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;du -m | sort -n&amp;#34;&lt;/span&gt;
alias web&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd ~/opt/mysite/&amp;#34;&lt;/span&gt;
alias gif&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;giph -s ~/usr/vid/&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+%Y-%m-%d_%H-%M-%S&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.gif&amp;#34;&lt;/span&gt;
alias free&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;free -h&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to use any of them, and don&amp;rsquo;t limit yourself, the possibilities with aliases are almost infinite!&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>My Top 10 Best Looking Cars</title>
       <link>https://co1ncidence.github.io/posts/top-10-best-looking-cars/</link>
       <pubDate>Wed, 05 Aug 2020 15:58:49 -0500</pubDate>
       
       <guid>https://co1ncidence.github.io/posts/top-10-best-looking-cars/</guid>
       <description>&lt;h2 id=&#34;10-mercedes-amg-gt-r&#34;&gt;10. Mercedes AMG GT-R&lt;/h2&gt;
&lt;p&gt;One of the only cars in recent times to really pose a threat to the sales of the 911, the GT does a good job of representing a similar muscular and round look while also adhering to the aesthetic of it&amp;rsquo;s predecessor, the SLS AMG.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mwGVMaC.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;9-datsun-240z-fairlady-bodykit&#34;&gt;9. Datsun 240z Fairlady (bodykit)&lt;/h2&gt;
&lt;p&gt;One of the most well-known sports cars of it&amp;rsquo;s time and now a JDM legend, the amount of things that have been done to the Datsun are insane, here is NightRide&amp;rsquo;s iteration of the vehicle, one of the best looking ones I&amp;rsquo;ve found:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XXhE6B9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;8-de-tomaso-pantera&#34;&gt;8. De Tomaso Pantera,&lt;/h2&gt;
&lt;p&gt;While some may find the more exotic &amp;ldquo;GTS&amp;rdquo; variant of the Pantera to be the one that looks better, I&amp;rsquo;m not personally a fan of the Lamborghini Countach-like aesthetic of that vehicle. I much prefer the cleaner, sharper look of the Pantera, it is definitely a piece of art to behold.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/e9Vxb5e.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;7-bmw-m3-e30&#34;&gt;7. BMW M3 (e30),&lt;/h2&gt;
&lt;p&gt;Couldn&amp;rsquo;t have a list like this without the legend itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BsUufV0.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-koenigsegg-one1&#34;&gt;6. Koenigsegg One:1,&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve always had a thing for more muscular looking cars, but the style that real muscle cars have doesn&amp;rsquo;t really hit the spot I want it to. The way Koenigsegg designed the One:1, however, matches perfectly with what I mean. Long, sleek lines with a short hood and flat buttresses really make this car stand out in the upper echelon of the hypercar scene. The fact that it is one of the fastest cars in the world also helps its case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.koenigsegg.com/wp-content/uploads/2019/01/Julia_LaPalme_LagunaSeca_2015_MGL3058.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-porsche-911-carrera-992&#34;&gt;5. Porsche 911 Carrera (992),&lt;/h2&gt;
&lt;p&gt;Now while people usually consider the design of the Porsche 911 to be quite bland and repetitive, I quite like the planted, wide feel the design of the new 992 Carrera brings to the table, and though it&amp;rsquo;s basically the same as the last generation, the new headlights are the reason I chose this one over the 991.2.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1MvCnm4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-mclaren-765lt&#34;&gt;4. Mclaren 765LT,&lt;/h2&gt;
&lt;p&gt;I was originally going to add the Mclaren 720s to take this place. But with the recent announcement that Mclaren&amp;rsquo;s next speedtail was going to be based off of the 720, I just had to use this one instead as it only improves on the beautiful design of its predecessor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/F2c5TVc.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-acura-nsx-gen-1&#34;&gt;3. Acura Nsx (Gen 1),&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t really have much to say about this car, just that it looks nice for it&amp;rsquo;s time and has managed to employ a quite timeless aesthetic. Too bad it&amp;rsquo;s successor didn&amp;rsquo;t achieve the same.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HyupsoV.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-ferrari-250swb&#34;&gt;2. Ferrari 250SWB,&lt;/h2&gt;
&lt;p&gt;A spin-off model of what was arguably one of the best looking Ferraris of all time, the 250SWB improves greatly on the vintage aesthetic of the 250GTO and manages to look even more sophisticated than its older brother.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3nE0VdI.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-aston-martin-dbs-superleggera&#34;&gt;1. Aston Martin DBS Superleggera,&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s the best looking, no argument here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8zDcqjT.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>My Openbox Rice(s)</title>
       <link>https://co1ncidence.github.io/posts/my-openbox-rice/</link>
       <pubDate>Tue, 04 Aug 2020 00:19:18 -0500</pubDate>
       
       <guid>https://co1ncidence.github.io/posts/my-openbox-rice/</guid>
       <description>&lt;p&gt;&lt;img src=&#34;https://i.postimg.cc/PfmCyx5s/2020-08-21-19-29-18.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above you can see a pretty complete screenshot of my openbox rice. I like to go for a kinda comfy, retro feels with my rices and like to avoid too many vivid colors. My polybar is also kept to a minimal, as to keep my (fairly) weak laptop from being under too much stress. One of my main goals with this rice was to minimize resource usage. I managed to accomplish this very well, with &lt;strong&gt;my ram usage after a fresh boot and with mpd running being only 280mb.&lt;/strong&gt; This is without consequence as well, I have the cupsd daemon running to manage print jobs, and with networkmanager running as well. One of my main goals with this system was to have something that not only was beautiful and efficient, but also usable in every scenario.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jjK0MiH.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another part of my rice I am really proud of is integrating a keyboard based workflow into openbox, I have the ability move, resize, and snap windows all with the keyboard, see this gif for more a more clear explanation:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/B2WQ6n1.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;One may wonder, however, why I don&amp;rsquo;t just use a tiling window manager. There is one main reason, Windows becoming fullscreen automatically gets really annoying after a while, and I&amp;rsquo;m not a big fan of the straight-edge aesthetic in most tiling window managers. Another, more personal reason, is that I really like the customizability and lightness of openbox, and, most importantly, the right-click menu, which allows me to quickly access my favorite programs and some mpd controls:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5qiWTtR.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;I also, of course, have an toggling polybar as it tends to get in my way because of my lacking screen real estate:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wpwsaZd.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;In addition to all this, I have just about every single one of my most used programs and commands mapped to keyboard shortcuts as possible using &lt;a href=&#34;https://github.com/baskerville/sxhkd&#34;&gt;sxhkd&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;some-screenshots-from-some-of-my-previous-rices&#34;&gt;Some screenshots from some of my previous rices:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.redd.it/uhmfcesa1zh51.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NNM1EHU.jpg&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743868817028939876/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743868991428100156/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869025699889162/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869067751981137/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869123804528641/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869197209174116/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869263236038786/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869347050553425/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869761556840569/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869845870739681/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743869978997948548/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743870073629966387/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743870198544597062/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743870351632498759/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743870537209741342/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743870663319879840/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743870977724776502/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743871057064230922/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743871129814564955/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743871216506372197/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743871305434267738/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743871396999856208/image.png&#34; alt=&#34;img&#34;&gt;
 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/743868455547305985/743871580370763856/image.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Why I Use Neovim</title>
       <link>https://co1ncidence.github.io/posts/neovim-thoughts/</link>
       <pubDate>Sun, 02 Aug 2020 22:35:38 -0500</pubDate>
       
       <guid>https://co1ncidence.github.io/posts/neovim-thoughts/</guid>
       <description>&lt;p&gt;As someone who&amp;rsquo;s always given a lot of importance to the concept of a streamlined workflow, I&amp;rsquo;ve always been on the lookout for the best possible tools for what I do. One of the most important tools someone like me can use is the &lt;strong&gt;Text Editor&lt;/strong&gt;. There are many popular Editors and IDE&amp;rsquo;s out there, and I have tried many of them. For the better part of the last year I have been &amp;ldquo;Editor Hopping&amp;rdquo; in search of something to replace what I used to use, which was Apache&amp;rsquo;s NetBeans IDE. It was slow and inefficient and had far too much bloat and unnecessary features for me. I wanted something that did only what I needed it to and that could adapt to my workflow too. I came to the decision of using Neovim, here is a look at what my configuration looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/QctXNzj.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it is perfectly optimized for everyday code editing. Neovim&amp;rsquo;s modal editing capabilities and powerful ranges and motions also extend its functionality far over other editors right out of the box. I don&amp;rsquo;t just use Neovim for code, however. Recently I have begun using it as my main editor for Markdown documents as well, and I believe it can replace my older choice, Typora, quite well:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MjoMYLZ.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Using plugins like &lt;a href=&#34;https://github.com/junegunn/goyo.vim&#34;&gt;goyo&lt;/a&gt; and &lt;a href=&#34;https://github.com/junegunn/limelight.vim&#34;&gt;limelight&lt;/a&gt; greatly help improve the visual potency of Neovim when editing in markdown, both also help improve visibility of the document and make focusing on the actual writing far easier. Other tools like &lt;a href=&#34;https://github.com/reedes/vim-pencil&#34;&gt;vim-pencil&lt;/a&gt; and &lt;a href=&#34;https://github.com/plasticboy/vim-markdown&#34;&gt;vim-markdown&lt;/a&gt; help out with the formatting and syntax control of the document. I also use a handful of other plugins in my configuration, for reference, here is my entire plugins block (I use the vim-plug plugin manager):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neoclide/coc.nvim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;reedes/vim-pencil&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;itchyny/lightline.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-commentary&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mattn/emmet-vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;alvan/vim-closetag&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ap/vim-css-color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yggdroot/indentline&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;preservim/nerdtree&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sheerun/vim-polyglot&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;SirVer/ultisnips&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dense-analysis/ale&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;honza/vim-snippets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elzr/vim-json&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;plasticboy/vim-markdown&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;iamcco/markdown-preview.nvim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junegunn/goyo.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junegunn/fzf&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junegunn/fzf.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junegunn/limelight.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prettier/vim-prettier&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some might say that this is an absurd amount of plugins for what is intended to be a minimalist editor, but I have carefully picked and chosen only the plugins that integrate well with what I do. You may have noticed the inclusion of WebDev plugins like &lt;a href=&#34;&#34;&gt;emmet-vim&lt;/a&gt; and &lt;a href=&#34;&#34;&gt;vim-prettier&lt;/a&gt; in this list, this is mostly to help with the editing and formatting of HTML files, as I am still quite unused to the syntax of that markup. I also use &lt;a href=&#34;https://github.com/preservim/nerdtree&#34;&gt;nerdtree&lt;/a&gt; and &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf&lt;/a&gt;, I consider these to be almost essential to every Vim/Neovim user, as they make hopping between files and mass editing so much easier and more efficient.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But you may be wondering,&lt;/strong&gt; why does having all of this stuff matter, don&amp;rsquo;t other, more mainstream editors have similar, if not better plugins? This is where my second point comes in, Neovim is light, and I mean &lt;em&gt;light&lt;/em&gt;, It barely comes in at around 10 megabytes with a &amp;ldquo;loaded&amp;rdquo; configuration like mine. It is also far faster than any other editor, being able to load up files that are more than 1000 lines long in under a second. Another aspect to consider is customization, the look and feel of Neovim is 100% under your control, down to even what text the status-bar displays.&lt;/p&gt;
&lt;p&gt;Lastly, I would like to mention the ergonomically and intelligently designed keybindings of Neovim and any other Vi-based editor, the convenience of being able to navigate and do basic edits straight from the home row is something that you can never come back from, trust me, try it out and you will never regret it.&lt;/p&gt;
&lt;h4 id=&#34;thanks-for-staying-with-me-through-this-little-opinionated-post-i-hope-you-enjoyed-it&#34;&gt;Thanks for staying with me through this little opinionated post, I hope you enjoyed it!&lt;/h4&gt;
</description>
     </item>
   
 </channel>
</rss>
